package xinyiyun.chenfei.com.movecar.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xinyiyun.chenfei.com.movecar.category.ClientInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT_INFO".
*/
public class ClientInfoDao extends AbstractDao<ClientInfo, Void> {

    public static final String TABLENAME = "CLIENT_INFO";

    /**
     * Properties of entity ClientInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Companyid = new Property(0, Integer.class, "companyid", false, "COMPANYID");
        public final static Property Khqc = new Property(1, String.class, "khqc", false, "KHQC");
        public final static Property CompanyLong = new Property(2, String.class, "CompanyLong", false, "COMPANY_LONG");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
        public final static Property Des = new Property(4, String.class, "Des", false, "DES");
        public final static Property Total = new Property(5, Integer.class, "Total", false, "TOTAL");
        public final static Property State = new Property(6, Integer.class, "State", false, "STATE");
    }


    public ClientInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ClientInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT_INFO\" (" + //
                "\"COMPANYID\" INTEGER," + // 0: companyid
                "\"KHQC\" TEXT," + // 1: khqc
                "\"COMPANY_LONG\" TEXT," + // 2: CompanyLong
                "\"USERID\" TEXT," + // 3: userid
                "\"DES\" TEXT," + // 4: Des
                "\"TOTAL\" INTEGER," + // 5: Total
                "\"STATE\" INTEGER);"); // 6: State
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClientInfo entity) {
        stmt.clearBindings();
 
        Integer companyid = entity.getCompanyid();
        if (companyid != null) {
            stmt.bindLong(1, companyid);
        }
 
        String khqc = entity.getKhqc();
        if (khqc != null) {
            stmt.bindString(2, khqc);
        }
 
        String CompanyLong = entity.getCompanyLong();
        if (CompanyLong != null) {
            stmt.bindString(3, CompanyLong);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String Des = entity.getDes();
        if (Des != null) {
            stmt.bindString(5, Des);
        }
 
        Integer Total = entity.getTotal();
        if (Total != null) {
            stmt.bindLong(6, Total);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(7, State);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClientInfo entity) {
        stmt.clearBindings();
 
        Integer companyid = entity.getCompanyid();
        if (companyid != null) {
            stmt.bindLong(1, companyid);
        }
 
        String khqc = entity.getKhqc();
        if (khqc != null) {
            stmt.bindString(2, khqc);
        }
 
        String CompanyLong = entity.getCompanyLong();
        if (CompanyLong != null) {
            stmt.bindString(3, CompanyLong);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String Des = entity.getDes();
        if (Des != null) {
            stmt.bindString(5, Des);
        }
 
        Integer Total = entity.getTotal();
        if (Total != null) {
            stmt.bindLong(6, Total);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(7, State);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ClientInfo readEntity(Cursor cursor, int offset) {
        ClientInfo entity = new ClientInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // companyid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // khqc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyLong
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Des
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Total
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // State
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClientInfo entity, int offset) {
        entity.setCompanyid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setKhqc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyLong(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDes(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotal(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ClientInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ClientInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ClientInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
